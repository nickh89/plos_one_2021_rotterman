# Description: code to run analytics and graphic functions associated with Rotterman et al 2020
#
# This program is believed to be free of errors, but it comes with no guarantee!
# The user bears all responsibility for interpreting the results.
#
## version Hx
# v0.1- original
# v0.2 - add custom function for correlation graphing
# Commit comments
## added chart.Correlation.linear function to tailor chart.corr plotting function to travis's needs
## must call chart.Correlation.linear in place of chart.Correlation
# v0.3 - add frequentist analysis for pop data
# v0.4 - added  graphing for Rheo~Conductance graphing to compare AIS MN to all other MNs from the lab
# v0.5 - added  graphing for Rheo~Conductance graphing to compare AIS MN to all other MNs from the lab
# v0.6 - final refining for deposite in Dryad (10/11/2021)
# v0.7 - remove personal paths and generalize (10/11/2021)
########################### prelims ###########################
invisible(rm(list = ls()))
invisible(gc())
########################### timer start ###########################
ptm <- proc.time()
########################### set dirs ###########################
# data_Name_filled<- 'AIS_NB fillings data_TR Dario_Final_CA_2.xlsx'
data_Name_filled<- 'AIS_BioPhys_MorphParam.xlsx'   ### after the input resistance and rheo have be reconciled
mainDir <- "~/Dropbox (GaTech)/Collaborators/Rotterman_Travis/AIS" ### set this filepath to the main directory
subDir <- "ais_Data/Final_Data" ## this is the subdirectory where data is held
figFolder <-"figFolder" ## this will be created if not already in existance
saveFolder <- "saveFolder" ## this will be created if not already in existance
invisible(  ifelse(!dir.exists(file.path(mainDir, subDir, figFolder)), dir.create(file.path(mainDir, subDir,figFolder)), FALSE))
invisible(  ifelse(!dir.exists(file.path(mainDir, subDir, saveFolder)), dir.create(file.path(mainDir, subDir,saveFolder)), FALSE))
#setwd(file.path(mainDir, subDir, figFolder))
########################### load general dependencies ###########################
packagesS<-c("devtools",
"dplyr",
"parallel",
"ggplot2",
"readxl",
"crayon",
"PerformanceAnalytics",
"Hmisc",
"tidyr",
"GGally",
"tibble",
"ggplot2",
"leaps",
"caret",
"rstan",
"rstanarm",
"coda",
"broom",
"tidybayes",
"emmeans",
"loo",
"bayesplot",
"magrittr",
"ggpubr",
"modelr",
"broom.mixed"
)
invisible(suppressWarnings(suppressMessages(package.check <- lapply(
packagesS,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
))))
## do not exclude these options
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
########################### Load Data ###########################
data_Name_pop<- "Population_Data.xlsx"
popData<-read_excel(file.path(mainDir,subDir,data_Name_pop),
na = "NA")
########################### Data Wrangling ###########################
cols.num <- c("Axon_Hil_Area","AIS_Area","AIS_Area_corrected","Soma_Diam","AIS_Length") ## get columns with NAs
suppressWarnings(popData[cols.num] <- sapply(popData[cols.num],as.numeric)) ## convert all to numeric instead of character class
na.omit_popdata<- na.omit(popData) ## remove NAs
na.omit_popdata$Muscle<- as.factor(na.omit_popdata$Muscle)
scaled.popdata<-na.omit_popdata
scaled.popdata[c(4:9)] <- lapply(na.omit_popdata[c(4:9)], function(x) c(scale(x)))
scaled.popdata$Dis_2_Soma<-scaled.popdata$Dis_2_Soma+abs(min(scaled.popdata$Dis_2_Soma))
View(popData)
cols.num <- c("Axon_Hil_Area","AIS_Area","AIS_Area_corrected","Soma_Diam","AIS_Length") ## get columns with NAs
suppressWarnings(popData[cols.num] <- sapply(popData[cols.num],as.numeric)) ## convert all to numeric instead of character class
na.omit_popdata<- na.omit(popData) ## remove NAs
na.omit_popdata$Muscle<- as.factor(na.omit_popdata$Muscle)
scaled.popdata<-na.omit_popdata
scaled.popdata[c(4:9)] <- lapply(na.omit_popdata[c(4:9)], function(x) c(scale(x)))
scaled.popdata$Dis_2_Soma<-scaled.popdata$Dis_2_Soma+abs(min(scaled.popdata$Dis_2_Soma))
########################### quick visuakization ###########################
# boxplot(na.omit_popdata$Dis_2_Soma ~ Muscle, na.omit_popdata)
########################### analyses/modeling ###########################
SEED<-set.seed(315789)
sink("/dev/null")
## old model
# post1 <- stan_glm(formula=Dis_2_Soma ~ Muscle,
#                   data = na.omit_popdata,
#                   adapt_delta = .99,
#                   iter = 4000,
#                   warmup = 400,
#                   chains = 4,
#                   thin = 2,
#                   seed=SEED)
## new model
## shifted_logNorm ##
setwd("~/Dropbox (GaTech)/Collaborators/Rotterman_Travis/AIS/bayesian_modeling/source_Model/")
# rstan:::rstudio_stanc("shifted_logNorm.stan")
m3 <- stan("shifted_logNorm_partial_pool_sigma.stan",
data = list(N1 = sum(na.omit_popdata$Muscle == "MG"),
N2 = sum(na.omit_popdata$Muscle == "SOL"),
y1 = na.omit_popdata$Dis_2_Soma[which(na.omit_popdata$Muscle == "MG")],
y2 = na.omit_popdata$Dis_2_Soma[which(na.omit_popdata$Muscle == "SOL")]),
control = list(adapt_delta = 0.999)
)
y2rep <- as.matrix(m3, pars = "y2rep")[sample.int(2000, 250), ]
y1rep <- as.matrix(m3, pars = "y1rep")[sample.int(2000, 250), ]
y1 <- na.omit_popdata$Dis_2_Soma[which(na.omit_popdata$Muscle == "MG")]
y2 <- na.omit_popdata$Dis_2_Soma[which(na.omit_popdata$Muscle == "SOL")]
post_sam <- as.data.frame(m3,
pars = c("MG", "SOL", "sigma", "sigma_1"))
ppc_dens_overlay(y1, yrep = y1rep)
invisible(rm(list = ls()))
invisible(gc())
########################### timer start ###########################
ptm <- proc.time()
########################### set dirs ###########################
# data_Name_filled<- 'AIS_NB fillings data_TR Dario_Final_CA_2.xlsx'
data_Name_filled<- 'AIS_BioPhys_MorphParam.xlsx'   ### after the input resistance and rheo have be reconciled
mainDir <- "~/Desktop/plos_one_Rotterman_2021" ### set this filepath to the main directory
subDir <- "final_data" ## this is the subdirectory where data is held
figFolder <-"figFolder" ## this will be created if not already in existance
saveFolder <- "saveFolder" ## this will be created if not already in existance
invisible(  ifelse(!dir.exists(file.path(mainDir, subDir, figFolder)), dir.create(file.path(mainDir, subDir,figFolder)), FALSE))
invisible(  ifelse(!dir.exists(file.path(mainDir, subDir, saveFolder)), dir.create(file.path(mainDir, subDir,saveFolder)), FALSE))
#setwd(file.path(mainDir, subDir, figFolder))
########################### load general dependencies ###########################
packagesS<-c("devtools",
"dplyr",
"parallel",
"ggplot2",
"readxl",
"crayon",
"PerformanceAnalytics",
"Hmisc",
"tidyr",
"GGally",
"tibble",
"ggplot2",
"leaps",
"caret",
"rstan",
"rstanarm",
"coda",
"broom",
"tidybayes",
"emmeans",
"loo",
"bayesplot",
"magrittr",
"ggpubr",
"modelr",
"broom.mixed"
)
invisible(suppressWarnings(suppressMessages(package.check <- lapply(
packagesS,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
))))
## do not exclude these options
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
#invisible(suppressWarnings(suppressMessages(lapply(packagesS, function(xxx) require(xxx, character.only = TRUE,quietly=TRUE,warn.conflicts = FALSE)))))
#invisible(lapply(packagesS, function(xxx) suppressMessages(require(xxx, character.only = TRUE,quietly=TRUE,warn.conflicts = FALSE))))
data_Name_pop<- "Population_Data.xlsx"
popData<-read_excel(file.path(mainDir,subDir,data_Name_pop),
na = "NA")
########################### Data Wrangling ###########################
cols.num <- c("Axon_Hil_Area","AIS_Area","AIS_Area_corrected","Soma_Diam","AIS_Length") ## get columns with NAs
suppressWarnings(popData[cols.num] <- sapply(popData[cols.num],as.numeric)) ## convert all to numeric instead of character class
na.omit_popdata<- na.omit(popData) ## remove NAs
na.omit_popdata$Muscle<- as.factor(na.omit_popdata$Muscle)
scaled.popdata<-na.omit_popdata
scaled.popdata[c(4:9)] <- lapply(na.omit_popdata[c(4:9)], function(x) c(scale(x)))
scaled.popdata$Dis_2_Soma<-scaled.popdata$Dis_2_Soma+abs(min(scaled.popdata$Dis_2_Soma))
########################### quick visuakization ###########################
# boxplot(na.omit_popdata$Dis_2_Soma ~ Muscle, na.omit_popdata)
########################### analyses/modeling ###########################
SEED<-set.seed(315789)
sink("/dev/null")
## old model
# post1 <- stan_glm(formula=Dis_2_Soma ~ Muscle,
#                   data = na.omit_popdata,
#                   adapt_delta = .99,
#                   iter = 4000,
#                   warmup = 400,
#                   chains = 4,
#                   thin = 2,
#                   seed=SEED)
## new model
## shifted_logNorm ##
setwd("~/Desktop/plos_one_Rotterman_2021/bayesian_modeling/source_Model/")
# rstan:::rstudio_stanc("shifted_logNorm.stan")
m3 <- stan("shifted_logNorm_partial_pool_sigma.stan",
data = list(N1 = sum(na.omit_popdata$Muscle == "MG"),
N2 = sum(na.omit_popdata$Muscle == "SOL"),
y1 = na.omit_popdata$Dis_2_Soma[which(na.omit_popdata$Muscle == "MG")],
y2 = na.omit_popdata$Dis_2_Soma[which(na.omit_popdata$Muscle == "SOL")]),
control = list(adapt_delta = 0.999)
)
# m4<-   stan_glmer(Soma_Diam ~ 1|Muscle, data = na.omit_popdata, iter = 4000, warmup = 500,
#                           chains = 4, refresh = 0,   adapt_delta = 0.99, seed = 1234)
#
# cat(red("95% and 66% PPD of Soma_Diam in each motor pool  \n"))
# tidyMCMC(m4, conf.int = TRUE, conf.method = "HPDinterval", conf.level = 0.95)
#
y1 <- na.omit_popdata$Dis_2_Soma[which(na.omit_popdata$Muscle == "MG")]
y2 <- na.omit_popdata$Dis_2_Soma[which(na.omit_popdata$Muscle == "SOL")]
# Replicated data (randomly sampling 100)
y1rep <- as.matrix(m3, pars = "y1rep")[sample.int(2000, 250), ]
y2rep <- as.matrix(m3, pars = "y2rep")[sample.int(2000, 250), ]
# Extract posterior samples of the conditional means
post_sam <- as.data.frame(m3,
pars = c("MG", "SOL", "sigma", "sigma_1"))
popdata_summary_manova<- summary.aov(manova( cbind(Dis_2_Soma,
Axon_Hil_Area,
AIS_Area,
AIS_Length,
Soma_Diam,
AIS_Area_corrected) ~ Muscle, data = na.omit_popdata )
) ## run the manova
### just some summaries of raw data ##
data.na.omit_popdata_summary<- na.omit_popdata %>%
group_by(Muscle) %>%
summarise(
count = n(),
mean_Dis_2_Soma = mean(Dis_2_Soma, na.rm = TRUE),
sd_Dis_2_Soma = sd(Dis_2_Soma, na.rm = TRUE),
mean_Axon_Hil_Area = mean(Axon_Hil_Area, na.rm = TRUE),
sd_Axon_Hil_Area = sd(Axon_Hil_Area, na.rm = TRUE),
mean_AIS_Length = mean(AIS_Length, na.rm = TRUE),
sd_AIS_Length = sd(AIS_Length, na.rm = TRUE),
mean_AIS_Area = mean(AIS_Area, na.rm = TRUE),
sd_AIS_Area = sd(AIS_Area, na.rm = TRUE),
mean_Soma_Diam = mean(Soma_Diam, na.rm = TRUE),
sd_Soma_Diam = sd(Soma_Diam, na.rm = TRUE),
mean_AIS_Area_corrected = mean(AIS_Area_corrected, na.rm = TRUE),
sd_AIS_Area_corrected = sd(AIS_Area_corrected, na.rm = TRUE),
mean_AIS_Area = mean(AIS_Area, na.rm = TRUE),
sd_AIS_Area = sd(AIS_Area, na.rm = TRUE)
)
write.csv(data.na.omit_popdata_summary,
file.path(mainDir,subDir,saveFolder, "data.na.omit_popdata_summary.csv"), row.names = TRUE)
cat(red("Difference in MN characteristics by muscle \n"))
print(data.na.omit_popdata_summary)
sink("/dev/null")
setwd(file.path(mainDir,subDir,saveFolder))
lapply(1:length(popdata_summary_manova), function(i) write.table(popdata_summary_manova[[i]],
file = paste0("popdata_summary_manova",names(popdata_summary_manova[i]), ".csv"),
sep=',',
row.names = FALSE))
sink()
suppressWarnings(data.na.omit_popdata_ppd_summary<-m3 %>%
spread_draws(MG, SOL) %>%
gather(group, b, MG:SOL, factor_key=TRUE)%>%
group_by(group) %>%
median_qi(condition_mean = b, .width = c(.95, .66))
)
write.csv(data.na.omit_popdata_ppd_summary,
file.path(mainDir,subDir,saveFolder, "data.na.omit_popdata_ppd_summary.csv"), row.names = TRUE)
cat(red("95% and 66% PPD of Soma_Diam in each motor pool  \n"))
print(data.na.omit_popdata_ppd_summary)
setwd(file.path(mainDir,subDir,figFolder))
cairo_ps("observed_data_box_whisker.eps")
ggplot(na.omit_popdata, aes(x = Muscle, y=Dis_2_Soma, fill=Muscle))+
geom_boxplot(outlier.shape = NA) +
scale_color_manual(values = c("#868686FF", "#EFC000FF"))+
theme_classic()
invisible(suppressMessages(suppressWarnings(dev.off())))
cairo_ps("ppc_dens_overlay.y1.eps")
# lims <- ggplot2::lims(x = c(0, 50), y = c(0,.25))
# ppc1<-ppc_dens_overlay(y1, yrep = y1rep)
# ppc1+lims
ppc_dens_overlay(y1, yrep = y1rep)
invisible(suppressMessages(suppressWarnings(dev.off())))
cairo_ps("ppc_dens_overlay.y2.eps")
# ppc2<-ppc_dens_overlay(y2, yrep = y2rep)
# ppc2+lims
ppc_dens_overlay(y2, yrep = y2rep)
invisible(suppressMessages(suppressWarnings(dev.off())))
# Posterior density
cairo_ps("ppd_predicted_1.eps")
bayesplot::mcmc_areas(post_sam, pars = c("MG", "SOL"),
prob = .95)
invisible(suppressMessages(suppressWarnings(dev.off())))
cairo_ps("ppd_predicted_sigma_1.eps")
bayesplot::mcmc_areas(post_sam, pars = c("sigma", "sigma_1"),
prob = .95)
invisible(suppressMessages(suppressWarnings(dev.off())))
cairo_ps("ppd_predicted_2.eps")
m3 %>%
spread_draws(MG, SOL) %>%
gather(group, b, MG:SOL, factor_key=TRUE)%>%
group_by(group) %>%
# mutate(condition_mean = `(Intercept)` + b) %>%
ggplot(aes(y = group, x = b)) +
stat_halfeye()
invisible(suppressMessages(suppressWarnings(dev.off())))
cairo_ps("ppd_predicted_sigma_2.eps")
m3 %>%
spread_draws(sigma, sigma_1) %>%
gather(group, b, sigma:sigma_1, factor_key=TRUE)%>%
group_by(group) %>%
# mutate(condition_mean = `(Intercept)` + b) %>%
ggplot(aes(y = group, x = b)) +
stat_halfeye()
invisible(suppressMessages(suppressWarnings(dev.off())))
# data density
cairo_ps("observed_data_distributions_1.eps")
## https://stackoverflow.com/questions/58837773/pivot-wider-issue-values-in-values-from-are-not-uniquely-identified-output-w
na.omit_popdata %>%
select(Muscle, Dis_2_Soma) %>%
group_by(Muscle) %>%
mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = Muscle, values_from = Dis_2_Soma) %>%
select(-row) %>%
na.omit()%>%
bayesplot::mcmc_areas(pars = c("MG", "SOL"),
prob = .95)
invisible(suppressMessages(suppressWarnings(dev.off())))
cairo_ps("observed_data_distributions_2.eps")
na.omit_popdata %>%
group_by(Muscle) %>%
# mutate(condition_mean = `(Intercept)` + b) %>%
ggplot(aes(y = Muscle, x = Dis_2_Soma)) +
stat_halfeye()
invisible(suppressMessages(suppressWarnings(dev.off())))
cat(green("Pop data Figs successfully created",
"Find them here", file.path(mainDir,subDir,figFolder),   sep="\n"))
data_Name_full_Rheo_Conduc<- 'Rin_vs_Rheo_MNs_Combined.xls'   ### after the input resistance and rheo have be reconciled
mainDir <- "~/Desktop/plos_one_Rotterman_2021" ### set this filepath to the main directory
subDir <- "final_data" ## this is the subdirectory where data is held
figFolder <-"figFolder" ## this will be created if not already in existance
saveFolder <- "saveFolder" ## this will be created if not already in existance
full_Rheo_Conduc<-read_excel(file.path(mainDir,subDir,data_Name_full_Rheo_Conduc),
na = "NA")
full_Rheo_Conduc$Who<- as.factor(full_Rheo_Conduc$Who)
full_Rheo_Conduc$Who_collapse<- as.factor(full_Rheo_Conduc$Who_collapse)
full_Rheo_Conduc$Muscle<- as.factor(full_Rheo_Conduc$Muscle)
scaled.data<-full_Rheo_Conduc%>%
# filter(Who_collapse != 0) %>%      ### change to '0' if you want the new cells and '1' to the old cells
select(Who,
Who_collapse,
Rheo,
Input_Resistance,
Conductance
)
full_Rheo_Conduc%>%
# filter(Who != 4) %>%
select(Rheo,
Input_Resistance,
Conductance,
Who_collapse
) %>%
ggscatter(x = "Conductance",
y = "Rheo",
color = "Who_collapse",
palette = c("#1f75FE",
"#4CB7A5",
# "#926EAE",
"#EE204D"),
add = "reg.line",
conf.int = TRUE)+
stat_cor(aes(color = Who_collapse))        # Add correlation coefficien
post1 = stan_glm(Rheo ~ Conductance, data = scaled.data)
post2 = stan_glm(Rheo ~ Conductance + Who_collapse, data = scaled.data)
post3 = stan_glm(Rheo ~ Conductance, data = scaled.data)
loo1 <- loo(post1, save_psis = TRUE, cores = 4, k_threshold =0.7)
loo2 <- loo(post2, save_psis = TRUE, cores = 4, k_threshold =0.7)
loo3 <- loo(post3, save_psis = TRUE, cores = 4, k_threshold =0.7)
loo_compare(loo1,loo2)
loo_compare(loo1,loo2)
loo1 <- loo(post1, save_psis = TRUE, cores = 4) #, k_threshold =0.7)
loo2 <- loo(post2, save_psis = TRUE, cores = 4) #, k_threshold =0.7)
loo3 <- loo(post3, save_psis = TRUE, cores = 4)
loo_compare(loo1,loo2)
mcmc <- as.matrix(post3)
Xmat = model.matrix(~Conductance, scaled.data)
coefs = mcmc[, c("(Intercept)", "Conductance")]
fit = coefs %*% t(Xmat)
resid = sweep(fit, 2, scaled.data$Rheo, "-")
var_f = apply(fit, 1, var)
var_e = apply(resid, 1, var)
R2 = var_f/(var_f + var_e)
tidyMCMC(as.mcmc(R2), conf.int = TRUE, conf.method = "HPDinterval")
sqrt(median(R2))
summary(lm(Rheo ~ Conductance , data = scaled.data))
write.csv(tidyMCMC(post3, conf.int = TRUE, conf.method = "HPDinterval", conf.level = 0.95),
file.path(mainDir,subDir,saveFolder, "data.rstan_model_final_Rheo~Conduc.csv"), row.names = TRUE)
cat(red("Bayesian Parameter estimates Rheo~Conduc ) \n"))
tidyMCMC(post3, conf.int = TRUE, conf.method = "HPDinterval", conf.level = 0.95)
write.csv(tidyMCMC(as.mcmc(R2), conf.int = TRUE, conf.method = "HPDinterval", conf.level = 0.95),
file.path(mainDir,subDir,saveFolder, "data.rstan_model_final_adj_r2_pop.csv"), row.names = TRUE)
cat(red("Bayesian Parameter estimates R^2 \n"))
tidyMCMC(as.mcmc(R2), conf.int = TRUE, conf.method = "HPDinterval", conf.level = 0.95)
setwd(file.path(mainDir,subDir,figFolder))
plot_1<-full_Rheo_Conduc%>%
filter(Who != 4) %>%
select(Rheo,
Input_Resistance,
Conductance,
Who
) %>%
ggscatter(x = "Conductance",
y = "Rheo",
color = "Who",
palette = c("#1f75FE",
"#4CB7A5",
# "#926EAE",
"#EE204D"),
add = "reg.line",
conf.int = TRUE)+
stat_cor(aes(color = Who))        # Add correlation coefficient
# stat_cor()        # Add correlation coefficient
plot_2<-full_Rheo_Conduc%>%
# filter(Who != 4) %>%
select(Rheo,
Input_Resistance,
Conductance,
Who
) %>%
ggscatter(x = "Conductance",
y = "Rheo",
color = "Who",
palette = c("#1f75FE",
"#4CB7A5",
"#926EAE",
"#EE204D"),
add = "reg.line",
conf.int = TRUE)+
stat_cor(aes(color = Who))
plot_3<-full_Rheo_Conduc%>%
# filter(Who != 4) %>%
select(Rheo,
Input_Resistance,
Conductance,
Who_collapse
) %>%
ggscatter(x = "Conductance",
y = "Rheo",
# color = "Who",
palette = c("#1f75FE",
"#4CB7A5",
"#926EAE",
"#EE204D"),
add = "reg.line",
conf.int = TRUE)+
stat_cor()
cairo_ps("observed_rheo~conduc_3.eps")
plot_1
invisible(suppressMessages(suppressWarnings(dev.off())))
cairo_ps("observed_rheo~conduc_4.eps")
plot_2
invisible(suppressMessages(suppressWarnings(dev.off())))
cairo_ps("observed_rheo~conduc_group.eps")
plot_3
invisible(suppressMessages(suppressWarnings(dev.off())))
plot_4<-scaled.data %>%
group_by(Who_collapse) %>%
data_grid(Conductance = seq_range(Conductance, n = 51)) %>%
add_fitted_draws(post1) %>%
ggplot(aes(x = Conductance, y = Rheo )) +
stat_lineribbon(aes(y = .value)) +
geom_point(data = scaled.data) +
scale_fill_brewer(palette = "Greys") +
scale_color_brewer(palette = "Set2")
plot_5<-scaled.data %>%
group_by(Who_collapse) %>%
data_grid(Conductance = seq_range(Conductance, n = 101)) %>%
add_fitted_draws(post2, n = 100) %>%
ggplot(aes(x = Conductance, y = Rheo, color = ordered(Who_collapse))) +
geom_line(aes(y = .value, group = paste(Who_collapse, .draw)),alpha = .1) +
geom_point(data = scaled.data) +
scale_color_brewer(palette = "Dark2")+
theme(legend.title = element_blank())
cbbPalette <- c("#000000", "#bebebe")
cbPalette <- c("#3366FF", "#999999")
plot_6<-scaled.data %>%
group_by(Who_collapse) %>%
data_grid(Conductance = seq_range(Conductance, n = 101)) %>%
add_fitted_draws(post2, n = 100) %>%
ggplot(aes(x = Conductance, y = Rheo, color = ordered(Who_collapse))) +
geom_line(aes(y = .value, group = paste(Who_collapse, .draw)),alpha = .1) +
geom_point(data = scaled.data) +
scale_colour_manual(values=cbPalette)+
theme_classic()+
theme(legend.title = element_blank())
scale_color_brewer(palette = "Dark2")
cairo_ps("BayesModel_rheo~conduc_3.eps")
plot_4
invisible(suppressMessages(suppressWarnings(dev.off())))
cairo_ps("BayesModel_rheo~conduc+who_4.eps")
plot_5
invisible(suppressMessages(suppressWarnings(dev.off())))
cairo_ps("BayesModel_rheo~conduc*who_4.eps")
plot_6
invisible(suppressMessages(suppressWarnings(dev.off())))
