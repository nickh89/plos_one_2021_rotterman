invisible(rm(list = ls()))
invisible(gc())
########################### timer start ###########################
ptm <- proc.time()
########################### set dirs ###########################
# data_Name_filled<- 'AIS_NB fillings data_TR Dario_Final_CA_2.xlsx'
data_Name_filled<- 'AIS_NB fillings data_BioPhys_MorphParam_Final_for_Paper.xlsx'   ### after the input resistance and rheo have be reconciled
mainDir <- "~/Dropbox (GaTech)/Collaborators/Rotterman_Travis/AIS" ### set this filepath to the main directory
subDir <- "ais_Data/Final_Data" ## this is the subdirectory where data is held
figFolder <-"figFolder" ## this will be created if not already in existance
saveFolder <- "saveFolder" ## this will be created if not already in existance
invisible(  ifelse(!dir.exists(file.path(mainDir, subDir, figFolder)), dir.create(file.path(mainDir, subDir,figFolder)), FALSE))
invisible(  ifelse(!dir.exists(file.path(mainDir, subDir, saveFolder)), dir.create(file.path(mainDir, subDir,saveFolder)), FALSE))
#setwd(file.path(mainDir, subDir, figFolder))
########################### load general dependencies ###########################
packagesS<-c("devtools",
"dplyr",
"parallel",
"ggplot2",
"readxl",
"crayon",
"PerformanceAnalytics",
"Hmisc",
"tidyr",
"GGally",
"tibble",
"ggplot2",
"leaps",
"caret",
"rstan",
"rstanarm",
"coda",
"broom",
"tidybayes",
"emmeans",
"loo",
"bayesplot",
"magrittr",
"ggpubr",
"modelr"
)
invisible(suppressWarnings(suppressMessages(package.check <- lapply(
packagesS,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
))))
## do not exclude these options
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
LoesLMPlotting <- function(data, mapping, ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
# geom_smooth(method=loess, fill="red", color="red", ...) +
geom_smooth(method=lm, fill="blue", color="blue", ...)
p
}
# https://www.statology.org/plot-confidence-interval-r/
chart.Correlation.linear <-
function (R, histogram = TRUE, method=c("pearson", "kendall", "spearman"), ...)
{ # @author R Development Core Team
# @author modified by Peter Carl & Marek Lahoda
# Visualization of a Correlation Matrix. On top the (absolute) value of the correlation plus the result
# of the cor.test as stars. On botttom, the bivariate scatterplots, with a linear regression fit.
# On diagonal, the histograms with probability, density and normal density (gaussian) distribution.
x = checkData(R, method="matrix")
if(missing(method)) method=method[1] #only use one
cormeth <- method
# Published at http://addictedtor.free.fr/graphiques/sources/source_137.R
panel.cor <- function(x, y, digits=2, prefix="", use="pairwise.complete.obs", method=cormeth, cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- cor(x, y, use=use, method=method) # MG: remove abs here
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.8/strwidth(txt)
test <- cor.test(as.numeric(x),as.numeric(y), method=method)
# borrowed from printCoefmat
Signif <- symnum(test$p.value, corr = FALSE, na = FALSE,
cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),
symbols = c("***", "**", "*", ".", " "))
# MG: add abs here and also include a 30% buffer for small numbers
text(0.5, 0.5, txt, cex = cex * (abs(r) + .3) / 1.3)
text(.8, .8, Signif, cex=cex, col=2)
}
#remove method from dotargs
dotargs <- list(...)
dotargs$method <- NULL
rm(method)
hist.panel = function (x, ...=NULL ) {
par(new = TRUE)
hist(x,
col = "light gray",
probability = TRUE,
axes = FALSE,
main = "",
breaks = "FD")
lines(density(x, na.rm=TRUE),
col = "red",
lwd = 1)
# adding line representing density of normal distribution with parameters correponding to estimates of mean and standard deviation from the data
ax.x = seq(min(x), max(x), 0.1)                                                  # ax.x containts points corresponding to data range on x axis
density.est = dnorm(ax.x, mean = mean(x), sd = sd(x))   # density corresponding to points stored in vector ax.x
lines(ax.x, density.est, col = "blue", lwd = 1, lty = 1)                                # adding line representing density into histogram
rug(x)
}
# Linear regression line fit over points
reg <- function(x, y, ...) {
newx <- seq(min(x), max(x), length.out=100)
preds <- predict(lm(y~x), newdata = data.frame(x=newx), interval = 'confidence')
#fill in area between regression line and confidence interval
polygon(c(rev(newx), newx), c(rev(preds[ ,3]), preds[ ,2]), col = '#3250a8', border = NA)
points(x,y, ...)
abline(lm(y~x), col = "red")
#add dashed lines for confidence bands
lines(newx, preds[ ,3], lty = 'dashed', col = 'blue')
lines(newx, preds[ ,2], lty = 'dashed', col = 'blue')
}
# Draw the chart
if(histogram)
pairs(x, gap=0, lower.panel=reg, upper.panel=panel.cor, diag.panel=hist.panel)
else
pairs(x, gap=0, lower.panel=reg, upper.panel=panel.cor)
}
########################### Load Data ###########################
allData<-read_excel(file.path(mainDir,subDir,data_Name_filled),
na = "NA")
### find large correlations with Rheo (0.7)
sigCorParamsWithRheo<-allData %>%
filter(dendritic_Origin == 0) %>%
select(Reho,
soma_Surf,
soma_Vol,
hilock_Lgth,
hilock_Surf,
hilocka_Vol,
ais_Lgth,
ais_Surf,
ais_Vol,
ap,
ahp_amp,
ahp_half,
rin ,
mV,
thresh,
sd_thresh,
cond_delay,
twt_Dealy,
twt_Amp,
twt_half_width ,
ttp,
relax
) %>%
drop_na() %>%
cor()
sigCorParamsWithRheo
data_Name_pop<- "Population_Data.xlsx"
invisible(rm(list = ls()))
invisible(gc())
########################### timer start ###########################
ptm <- proc.time()
########################### set dirs ###########################
# data_Name_filled<- 'AIS_NB fillings data_TR Dario_Final_CA_2.xlsx'
data_Name_filled<- 'AIS_BioPhys_MorphParam.xlsx'   ### after the input resistance and rheo have be reconciled
mainDir <- "~/Dropbox (GaTech)/Collaborators/Rotterman_Travis/AIS" ### set this filepath to the main directory
subDir <- "ais_Data/Final_Data" ## this is the subdirectory where data is held
figFolder <-"figFolder" ## this will be created if not already in existance
saveFolder <- "saveFolder" ## this will be created if not already in existance
invisible(  ifelse(!dir.exists(file.path(mainDir, subDir, figFolder)), dir.create(file.path(mainDir, subDir,figFolder)), FALSE))
invisible(  ifelse(!dir.exists(file.path(mainDir, subDir, saveFolder)), dir.create(file.path(mainDir, subDir,saveFolder)), FALSE))
########################### load general dependencies ###########################
packagesS<-c("devtools",
"dplyr",
"parallel",
"ggplot2",
"readxl",
"crayon",
"PerformanceAnalytics",
"Hmisc",
"tidyr",
"GGally",
"tibble",
"ggplot2",
"leaps",
"caret",
"rstan",
"rstanarm",
"coda",
"broom",
"tidybayes",
"emmeans",
"loo",
"bayesplot",
"magrittr",
"ggpubr",
"modelr",
"broom.mixed"
)
invisible(suppressWarnings(suppressMessages(package.check <- lapply(
packagesS,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
))))
## do not exclude these options
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
#invisible(suppressWarnings(suppressMessages(lapply(packagesS, function(xxx) require(xxx, character.only = TRUE,quietly=TRUE,warn.conflicts = FALSE)))))
#invisible(lapply(packagesS, function(xxx) suppressMessages(require(xxx, character.only = TRUE,quietly=TRUE,warn.conflicts = FALSE))))
data_Name_pop<- "Population_Data.xlsx"
popData<-read_excel(file.path(mainDir,subDir,data_Name_pop),
na = "NA")
cols.num <- c("Axon_Hil_Area","AIS_Area","AIS_Area_corrected","Soma_Diam","AIS_Length") ## get columns with NAs
suppressWarnings(popData[cols.num] <- sapply(popData[cols.num],as.numeric)) ## convert all to numeric instead of character class
na.omit_popdata<- na.omit(popData) ## remove NAs
na.omit_popdata$Muscle<- as.factor(na.omit_popdata$Muscle)
scaled.popdata<-na.omit_popdata
scaled.popdata[c(4:9)] <- lapply(na.omit_popdata[c(4:9)], function(x) c(scale(x)))
scaled.popdata$Dis_2_Soma<-scaled.popdata$Dis_2_Soma+abs(min(scaled.popdata$Dis_2_Soma))
SEED<-set.seed(315789)
sink("/dev/null")
## old model
# post1 <- stan_glm(formula=Dis_2_Soma ~ Muscle,
#                   data = na.omit_popdata,
#                   adapt_delta = .99,
#                   iter = 4000,
#                   warmup = 400,
#                   chains = 4,
#                   thin = 2,
#                   seed=SEED)
## new model
## shifted_logNorm ##
setwd("~/Dropbox (GaTech)/Collaborators/Rotterman_Travis/AIS/bayesian_modeling/source_Model/")
# rstan:::rstudio_stanc("shifted_logNorm.stan")
m3 <- stan("shifted_logNorm_partial_pool_sigma.stan",
data = list(N1 = sum(na.omit_popdata$Muscle == "MG"),
N2 = sum(na.omit_popdata$Muscle == "SOL"),
y1 = na.omit_popdata$Dis_2_Soma[which(na.omit_popdata$Muscle == "MG")],
y2 = na.omit_popdata$Dis_2_Soma[which(na.omit_popdata$Muscle == "SOL")]),
control = list(adapt_delta = 0.999)
)
y1 <- na.omit_popdata$Dis_2_Soma[which(na.omit_popdata$Muscle == "MG")]
y2 <- na.omit_popdata$Dis_2_Soma[which(na.omit_popdata$Muscle == "SOL")]
# Replicated data (randomly sampling 100)
y1rep <- as.matrix(m3, pars = "y1rep")[sample.int(2000, 250), ]
y2rep <- as.matrix(m3, pars = "y2rep")[sample.int(2000, 250), ]
# Extract posterior samples of the conditional means
post_sam <- as.data.frame(m3,
pars = c("MG", "SOL", "sigma", "sigma_1"))
sink()
popdata_summary_manova<- summary.aov(manova( cbind(Dis_2_Soma,
Axon_Hil_Area,
AIS_Area,
AIS_Length,
Soma_Diam,
AIS_Area_corrected) ~ Muscle, data = na.omit_popdata )
)
post_sam
summary(m3)
class(m3)
hdi(m3)
suppressWarnings(data.na.omit_popdata_ppd_summary<-m3 %>%
spread_draws(MG, SOL) %>%
gather(group, b, MG:SOL, factor_key=TRUE)%>%
group_by(group) %>%
median_qi(condition_mean = b, .width = c(.95, .66))
)
cat(red("95% and 66% PPD of Dis-to-soma in each motor pool  \n"))
print(data.na.omit_popdata_ppd_summary)
View(na.omit_popdata)
m3 <- stan("shifted_logNorm_partial_pool_sigma.stan",
data = list(N1 = sum(na.omit_popdata$Muscle == "MG"),
N2 = sum(na.omit_popdata$Muscle == "SOL"),
y1 = na.omit_popdata$Soma_Diam[which(na.omit_popdata$Muscle == "MG")],
y2 = na.omit_popdata$Soma_Diam[which(na.omit_popdata$Muscle == "SOL")]),
control = list(adapt_delta = 0.999)
)
suppressWarnings(data.na.omit_popdata_ppd_summary<-m3 %>%
spread_draws(MG, SOL) %>%
gather(group, b, MG:SOL, factor_key=TRUE)%>%
group_by(group) %>%
median_qi(condition_mean = b, .width = c(.95, .66))
)
cat(red("95% and 66% PPD of Soma_Diam in each motor pool  \n"))
print(data.na.omit_popdata_ppd_summary)
pairs(m3)
pairs(m3)
pairs(m3)
m3 <- stan("shifted_logNorm_partial_pool_sigma.stan",
data = list(N1 = sum(na.omit_popdata$Muscle == "MG"),
N2 = sum(na.omit_popdata$Muscle == "SOL"),
y1 = na.omit_popdata$AIS_Length[which(na.omit_popdata$Muscle == "MG")],
y2 = na.omit_popdata$AIS_Length[which(na.omit_popdata$Muscle == "SOL")]),
control = list(adapt_delta = 0.999)
)
suppressWarnings(data.na.omit_popdata_ppd_summary<-m3 %>%
spread_draws(MG, SOL) %>%
gather(group, b, MG:SOL, factor_key=TRUE)%>%
group_by(group) %>%
median_qi(condition_mean = b, .width = c(.95, .66))
)
cat(red("95% and 66% PPD of Soma_Diam in each motor pool  \n"))
print(data.na.omit_popdata_ppd_summary)
cat(red("95% and 66% PPD of AIS_Length in each motor pool  \n"))
print(data.na.omit_popdata_ppd_summary)
m4<-   stan_glm(Soma_Diam ~ Muscle, data = na.omit_popdata, iter = 4000, warmup = 500,
chains = 4, refresh = 0,   adapt_delta = 0.99, seed = 1234)
tidyMCMC(m4, conf.int = TRUE, conf.method = "HPDinterval", conf.level = 0.95)
